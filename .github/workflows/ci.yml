name: CI

on:
  push:
    branches:
      - develop
      - main
  pull_request:
    branches:
      - develop

permissions:
  contents: read

jobs:
  test-ghc-os:
    name: GHC ${{ matrix.ghc }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
        ghc:
          - "8.2.2"
          - "8.4.4"
          - "8.6.5"
          - "8.8.4"
          - "8.10.7"
          - "9.0.2"
          - "9.2.8"
          - "9.4.8"
          - "9.6.6"
          - "9.8.2"
          - "9.10.1"
    steps:
      - name: "checkout"
        uses: actions/checkout@v4

      - name: "setup Haskell"
        uses: haskell-actions/setup@v2
        id: setup
        with:
          ghc-version: ${{ matrix.ghc }}
          cabal-version: latest
          cabal-update: false
          enable-stack: true
          stack-version: 2.15.7

      - name: "update Cabal"
        run: cabal update

      - name: "setup environment"
        run: |
          GHC_VERSION=$(ghc --numeric-version)
          echo "GHC_VERSION=${GHC_VERSION}" | tee -a "${GITHUB_ENV}"
          CABAL_VERSION=$(cabal --numeric-version)
          echo "CABAL_VERSION=${CABAL_VERSION}" | tee -a "${GITHUB_ENV}"
          CABAL_OPTS=""
          if [ -f "cabal-${GHC_VERSION}.project" ] ; then
            CABAL_OPTS="--project-file=cabal-${GHC_VERSION}.project"
          fi
          echo "CABAL_OPTS=${CABAL_OPTS}" | tee -a "${GITHUB_ENV}"
          STACK_YAML="stack-${GHC_VERSION}.yaml"
          echo "STACK_YAML=${STACK_YAML}" | tee -a "${GITHUB_ENV}"
          TS_YYYYMM="$(date +%Y%m)"
          echo "TS_YYYYMM=${TS_YYYYMM}" | tee -a "${GITHUB_ENV}"
          CACHE_CABAL_KEY_PREFIX="${RUNNER_OS}-${TS_YYYYMM}-ghc-${GHC_VERSION}-cabal-${CABAL_VERSION}"
          echo "CACHE_CABAL_KEY_PREFIX=${CACHE_CABAL_KEY_PREFIX}" | tee -a "${GITHUB_ENV}"
          CACHE_STACK_KEY_PREFIX="${RUNNER_OS}-${TS_YYYYMM}-ghc-${GHC_VERSION}-stack"
          echo "CACHE_STACK_KEY_PREFIX=${CACHE_STACK_KEY_PREFIX}" | tee -a "${GITHUB_ENV}"

      - name: "stack: restore cache"
        uses: actions/cache/restore@v3
        id: cache-stack
        with:
          path: ~/.stack
          key: ${{ env.CACHE_STACK_KEY_PREFIX }}
          restore-keys: ${{ env.CACHE_STACK_KEY_PREFIX }}

      - name: "ttc: cabal: configure build"
        run: |
          cabal configure $CABAL_OPTS --enable-tests --enable-benchmarks --disable-documentation
          cabal build ttc --dry-run $CABAL_OPTS

      - name: "ttc: cabal: restore cache"
        uses: actions/cache/restore@v3
        id: cache-cabal-ttc
        with:
          path: ${{ steps.setup.outputs.cabal-store }}
          key: ${{ env.CACHE_CABAL_KEY_PREFIX }}-ttc-plan-${{ hashFiles('**/plan.json') }}
          restore-keys: ${{ env.CACHE_CABAL_KEY_PREFIX }}-ttc-plan-

      - name: "ttc: cabal: install dependencies"
        run: cabal build ttc $CABAL_OPTS --only-dependencies

      - if: ${{ !steps.cache-cabal-ttc.outputs.cache-hit
          || steps.cache-cabal-ttc.outputs.cache-primary-key != steps.cache-cabal-ttc.outputs.cache-matched-key }}
        name: "ttc: cabal: save cache"
        uses: actions/cache/save@v3
        with:
          path: ${{ steps.setup.outputs.cabal-store }}
          key: ${{ steps.cache-cabal-ttc.outputs.cache-primary-key }}

      - name: "ttc: cabal: build"
        run: cabal build ttc $CABAL_OPTS

      - name: "ttc: cabal: test"
        run: cabal test ttc $CABAL_OPTS

      - name: "ttc: cabal: haddock"
        run: cabal haddock ttc $CABAL_OPTS

      - name: "ttc: cabal: examples"
        run: cabal build ttc-examples $CABAL_OPTS

      - name: "ttc: stack: configure build"
        run: stack --system-ghc ls dependencies json > stack-deps.json

      - name: "ttc: stack: restore cache"
        uses: actions/cache/restore@v3
        id: cache-stack-ttc
        with:
          path: .stack-work
          key: ${{ env.CACHE_STACK_KEY_PREFIX }}-ttc-deps-${{ hashFiles('stack-deps.json') }}
          restore-keys: ${{ env.CACHE_STACK_KEY_PREFIX }}-ttc-deps-

      - name: "ttc: stack: build"
        run: stack build ttc --system-ghc --test --bench --no-run-tests --no-run-benchmarks

      - name: "ttc: stack: test"
        run: stack test ttc --system-ghc

      - name: "ttc: stack: haddock"
        run: stack haddock ttc --system-ghc

      - name: "ttc: stack: examples"
        run: stack build ttc-examples --system-ghc

      - if: ${{ !steps.cache-stack-ttc.outputs.cache-hit
          || steps.cache-stack-ttc.outputs.cache-primary-key != steps.cache-stack-ttc.outputs.cache-matched-key }}
        name: "ttc: stack: save cache"
        uses: actions/cache/save@v3
        with:
          path: .stack-work
          key: ${{ steps.cache-stack-ttc.outputs.cache-primary-key }}

      - if: ${{ !steps.cache-stack.outputs.cache-hit
          || steps.cache-stack.outputs.cache-primary-key != steps.cache-stack.outputs.cache-matched-key }}
        name: "stack: save cache"
        uses: actions/cache/save@v3
        with:
          path: ~/.stack
          key: ${{ steps.cache-stack.outputs.cache-primary-key }}

      - if: matrix.ghc == '8.2.2'
        name: "ttc: lower bounds: setup environment"
        run: |
          CABAL_OPTS="--project-file=cabal-ttc-bounds-lower.project"
          echo "CABAL_OPTS=${CABAL_OPTS}" | tee -a "${GITHUB_ENV}"
          CACHE_CABAL_KEY_PREFIX="${RUNNER_OS}-${TS_YYYYMM}-ghc-${GHC_VERSION}-cabal-${CABAL_VERSION}-ttc-bounds-lower"
          echo "CACHE_CABAL_KEY_PREFIX=${CACHE_CABAL_KEY_PREFIX}" | tee -a "${GITHUB_ENV}"

      - if: matrix.ghc == '8.2.2'
        name: "ttc: lower bounds: configure build"
        run: |
          cabal configure $CABAL_OPTS --enable-tests --enable-benchmarks --disable-documentation
          cabal build ttc --dry-run $CABAL_OPTS

      - if: matrix.ghc == '8.2.2'
        name: "ttc: lower bounds: restore cache"
        uses: actions/cache/restore@v3
        id: cache-ttc-bounds-lower
        with:
          path: ${{ steps.setup.outputs.cabal-store }}
          key: ${{ env.CACHE_CABAL_KEY_PREFIX }}-plan-${{ hashFiles('**/plan.json') }}
          restore-keys: ${{ env.CACHE_CABAL_KEY_PREFIX }}-

      - if: matrix.ghc == '8.2.2'
        name: "ttc: lower bounds: install dependencies"
        run: cabal build ttc $CABAL_OPTS --only-dependencies

      - if: ${{ matrix.ghc == '8.2.2' && (!steps.cache-ttc-bounds-lower.outputs.cache-hit || steps.cache-ttc-bounds-lower.outputs.cache-primary-key != steps.cache-ttc-bounds-lower.outputs.cache-matched-key) }}
        name: "ttc: lower bounds: save cache"
        uses: actions/cache/save@v3
        with:
          path: ${{ steps.setup.outputs.cabal-store }}
          key: ${{ steps.cache-ttc-bounds-lower.outputs.cache-primary-key }}

      - if: matrix.ghc == '8.2.2'
        name: "ttc: lower bounds: build"
        run: cabal build ttc $CABAL_OPTS

      - if: matrix.ghc == '8.2.2'
        name: "ttc: lower bounds: test"
        run: cabal test ttc $CABAL_OPTS

      - if: matrix.ghc == '8.2.2'
        name: "ttc: lower bounds: haddock"
        run: cabal haddock ttc $CABAL_OPTS

      - if: matrix.ghc == '8.2.2'
        name: "ttc: lower bounds: examples"
        run: cabal build ttc-examples $CABAL_OPTS

      - if: matrix.ghc == '9.10.1'
        name: "ttc: upper bounds: setup environment"
        run: |
          CABAL_OPTS="--project-file=cabal-ttc-bounds-upper.project"
          echo "CABAL_OPTS=${CABAL_OPTS}" | tee -a "${GITHUB_ENV}"
          CACHE_CABAL_KEY_PREFIX="${RUNNER_OS}-${TS_YYYYMM}-ghc-${GHC_VERSION}-cabal-${CABAL_VERSION}-ttc-bounds-upper"
          echo "CACHE_CABAL_KEY_PREFIX=${CACHE_CABAL_KEY_PREFIX}" | tee -a "${GITHUB_ENV}"

      - if: matrix.ghc == '9.10.1'
        name: "ttc: upper bounds: configure build"
        run: |
          cabal configure $CABAL_OPTS --enable-tests --enable-benchmarks --disable-documentation
          cabal build ttc --dry-run $CABAL_OPTS

      - if: matrix.ghc == '9.10.1'
        name: "ttc: upper bounds: restore cache"
        uses: actions/cache/restore@v3
        id: cache-ttc-bounds-upper
        with:
          path: ${{ steps.setup.outputs.cabal-store }}
          key: ${{ env.CACHE_CABAL_KEY_PREFIX }}-plan-${{ hashFiles('**/plan.json') }}
          restore-keys: ${{ env.CACHE_CABAL_KEY_PREFIX }}-

      - if: matrix.ghc == '9.10.1'
        name: "ttc: upper bounds: install dependencies"
        run: cabal build ttc $CABAL_OPTS --only-dependencies

      - if: ${{ matrix.ghc == '9.10.1' && (!steps.cache-ttc-bounds-upper.outputs.cache-hit || steps.cache-ttc-bounds-upper.outputs.cache-primary-key != steps.cache-ttc-bounds-upper.outputs.cache-matched-key) }}
        name: "ttc: upper bounds: save cache"
        uses: actions/cache/save@v3
        with:
          path: ${{ steps.setup.outputs.cabal-store }}
          key: ${{ steps.cache-ttc-bounds-upper.outputs.cache-primary-key }}

      - if: matrix.ghc == '9.10.1'
        name: "ttc: upper bounds: build"
        run: cabal build ttc $CABAL_OPTS

      - if: matrix.ghc == '9.10.1'
        name: "ttc: upper bounds: test"
        run: cabal test ttc $CABAL_OPTS

      - if: matrix.ghc == '9.10.1'
        name: "ttc: upper bounds: haddock"
        run: cabal haddock ttc $CABAL_OPTS

      - if: matrix.ghc == '9.10.1'
        name: "ttc: upper bounds: examples"
        run: cabal build ttc-examples $CABAL_OPTS

  test-cabal2410-ghc822:
    name: Cabal ${{ matrix.cabal }} (GHC ${{ matrix.ghc }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
        ghc:
          - "8.2.2"
        cabal:
          - "2.4.1.0"
    steps:
      - name: "checkout"
        uses: actions/checkout@v4

      - name: "setup Haskell"
        uses: haskell-actions/setup@v2
        id: setup
        with:
          ghc-version: ${{ matrix.ghc }}
          cabal-version: ${{ matrix.cabal }}
          cabal-update: true

      - name: "setup environment"
        run: |
          GHC_VERSION=$(ghc --numeric-version)
          echo "GHC_VERSION=${GHC_VERSION}" | tee -a "${GITHUB_ENV}"
          CABAL_VERSION=$(cabal --numeric-version)
          echo "CABAL_VERSION=${CABAL_VERSION}" | tee -a "${GITHUB_ENV}"
          CABAL_OPTS=""
          if [ -f "cabal-${GHC_VERSION}.project" ] ; then
            CABAL_OPTS="--project-file=cabal-${GHC_VERSION}.project"
          fi
          echo "CABAL_OPTS=${CABAL_OPTS}" | tee -a "${GITHUB_ENV}"
          TS_YYYYMM="$(date +%Y%m)"
          CACHE_CABAL_KEY_PREFIX="${RUNNER_OS}-${TS_YYYYMM}-ghc-${GHC_VERSION}-cabal-${CABAL_VERSION}"
          echo "CACHE_CABAL_KEY_PREFIX=${CACHE_CABAL_KEY_PREFIX}" | tee -a "${GITHUB_ENV}"

      - name: "ttc: configure build"
        run: |
          cabal v2-configure $CABAL_OPTS --enable-tests --enable-benchmarks --disable-documentation
          cabal v2-build ttc --dry-run $CABAL_OPTS

      - name: "ttc: restore cache"
        uses: actions/cache/restore@v3
        id: cache-cabal-ttc
        with:
          path: ${{ steps.setup.outputs.cabal-store }}
          key: ${{ env.CACHE_CABAL_KEY_PREFIX }}-ttc-plan-${{ hashFiles('**/plan.json') }}
          restore-keys: ${{ env.CACHE_CABAL_KEY_PREFIX }}-ttc-

      - name: "ttc: install dependencies"
        run: cabal v2-build ttc $CABAL_OPTS --only-dependencies

      - if: ${{ !steps.cache-cabal-ttc.outputs.cache-hit
          || steps.cache-cabal-ttc.outputs.cache-primary-key != steps.cache-cabal-ttc.outputs.cache-matched-key }}
        name: "ttc: save cache"
        uses: actions/cache/save@v3
        with:
          path: ${{ steps.setup.outputs.cabal-store }}
          key: ${{ steps.cache-cabal-ttc.outputs.cache-primary-key }}

      - name: "ttc: build"
        run: cabal v2-build ttc $CABAL_OPTS

      - name: "ttc: test"
        run: cabal v2-test ttc $CABAL_OPTS

      - name: "ttc: haddock"
        run: cabal v2-haddock ttc $CABAL_OPTS

      - name: "ttc: examples"
        run: cabal v2-build ttc-examples $CABAL_OPTS
